<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
  <meta http-equiv="Content-Language" content="en-gb">
  <meta name="GENERATOR" content="Microsoft FrontPage 6.0">
  <meta name="ProgId" content="FrontPage.Editor.Document">
  <title>How to compile NetBee</title>

  
  
  <style>
<!--
body         { font-family: Verdana; font-size:10pt }
tbody        { font-family: Verdana; font-size:10pt }
-->
  </style>
</head>

<body>
<h1>How to compile NetBee</h1>

<p> This section is useful only for the programmers that want to modify
and recompile NetBee sources. Please note that this page is provided
for internal use only, since NetBee sources are not publicly available.</p>

<ul>

  <li><a href="#CompileWin">Compiling NetBee on Windows</a></li>
  <li><a href="#CompileUNIX">Compiling NetBee on UNIX</a></li>
  <li><a href="#Troubles">Possible problems</a></li>
  <li><a href="#NativeBackend">Enabling Native Backends</a></li>
  <li><a href="#PreparingRunTime">Preparing the run-time environment (Windows)</a></li>
  <li><a href="#DevPack">Creating the Developer's Pack</a></li>
</ul>

<h2><a name="CompileWin"></a>Compiling NetBee on Windows</h2>

<p>NetBee sources must be unpacked on the hard disk; in order to keep
the settings of the project files, the folder structure must be the
following: </p>

<pre class="code"> (root)--+<br>         |<br>         +-- netbee (the root folder of the SVN repository)<br>         |<br>         +-- xerces-c (XML library: include, library and DLL files)<br>         |<br>         +-- wpdpack (WinPcap Developer's Pack: include, library and DLL files)<br>	</pre>

<p>NetBee source code must be unpacked in the the <code><strong>netbee</strong></code>
folder. </p>

<p>The Xerces library is used for managing XML files; the WinPcap
library provides some low-level support for packet capture and such. </p>

<p><strong>WinPcap warning</strong>: please note that you <strong>must</strong>
install WinPcap on your system because the WinPcap Developer's Pack
contains only headers and libraries requried to compile NetBee, but it
does not contain the run-time DLLs required to execute the software.</p>

<h3>Required tools</h3>

<p>In order to compile NetBee in <strong>Windows</strong>, you need
the following tools:</p>

<table border="1" width="100%">

  <tbody>
    <tr>
      <th>Tool</th>
      <th>Description</th>
    </tr>
    <tr>
      <td bgcolor="#ffffcc"><b><a href="http://www.cmake.org/">Cmake</a></b></td>
      <td>The building environment is created by CMake. Therefore you
need this tool in order to create the project files. Note: you must
install Cmake separately from Cygwin, since that version does not
support the generation of project files for Visual Studio.</td>
    </tr>
    <tr>
      <td bgcolor="#ffffcc"><b>Microsoft Visual Studio .NET 2010</b></td>
      <td>The compiler, of course. Please note that most of the code should compile 
	  with Visual Studio >= 2005; we recommend version 2010 because of the better 
	  support to the C++ STL.</td>
    </tr>
    <tr>
      <td bgcolor="#ffffcc"><b>CygWin</b></td>
      <td>Some standard UNIX tools are used for some specific functions
(scripts, e.g. for creating the source tarball, compiling grammar
filesïfiles, etc.). Although in principle you can avoid using CygWin, if you
want
to compile everything on Windows you must have this package installed.
Please be careful that the following packages (in addition to default
ones) gets installed:
      <ul>
        <li><strong>archive/zip</strong></li>
        <li><strong>devel/bison</strong></li>
        <li><strong>devel/doxygen</strong></li>
        <li><strong>devel/flex</strong></li>
      </ul>
      </td>
    </tr>
  </tbody>
</table>

<p>In addition, you need the following libraries: </p>

<table border="1" width="100%">

  <tbody>
    <tr>
      <th>Required Tools </th>
      <th>Installation</th>
    </tr>
    <tr>
      <td bgcolor="#ffffcc"><b><a href="http://xml.apache.org/xerces-c/download.cgi">Xerces-C version
2.8.0</a></b></td>
      <td>You have to extract all the content of the Xerces tarball
(e.g. <code>xerces-c2_8_0-windows_nt-msvc_60.zip</code> in Windows) in
the <code>xerces-c</code> folder, and copy the dynamic link libraries
(e.g. <code>xerces-c_2_8_0.dll</code>) in your <code>netbee/bin</code>
folder. Please note that Xerces &gt; 2.8.0 are currently unsupported.</td>
    </tr>
    <tr>
      <td bgcolor="#ffffcc"><b><a href="http://www.winpcap.org/install/default.htm">WinPcap Binaries</a></b></td>
      <td>You have to install these binaries in your system by
launching the downloaded executable.
      <p>WinPcap must be in version &gt;= 4.1.</p>
      </td>
    </tr>
    <tr>
      <td bgcolor="#ffffcc"><b><a href="http://www.winpcap.org/devel.htm">WinPcap Developer's Pack</a></b></td>
      <td>You have to extract all the content of the WinPcap
Developer's pack (e.g. <code>WpdPack_4_1.zip</code>) in the <code>WpdPack</code>
folder.
      <p>WinPcap must be in version &gt;= 4.1.</p>
      </td>
    </tr>
  </tbody>
</table>

<h3>Compiling NetBee</h3>

<table border="1" width="100%">

  <tbody>
    <tr>
      <td bgcolor="#ffffcc" valign="top"><b>Prepare your environment</b></td>
      <td>The first step is to add the <strong>CygWin</strong> and <strong>Cmake</strong>
binary folders to your executable path. You can either:
      <ul>
        <li> add these folders to your default path (start menu -
control panel - system - advanced - environment variables - system
variables - path) </li>
        <li> (or) add these folders to Visual Studio executable path
(Tools - Options - Project and Solutions - VC++ Directories) </li>
      </ul>
      </td>
    </tr>
    <tr>
      <td bgcolor="#ffffcc" valign="top"><b>Create the project files</b></td>
      <td>Then, you need to open a command shell, move into the NetBee
root folder, and type the command '<code>cmake .</code>' (i.e., '<code>cmake
[space] [dot]</code>') in the following folders:
      <ul>
        <li> <code>src</code> </li>
        <li> <code>samples</code> </li>
        <li> <code>tools</code> </li>
      </ul>
      <p>Cmake will create the building environment for your system,
and you will find a Visual Studio solution file in each one of these
folders. </p>
      </td>
    </tr>
    <tr>
      <td bgcolor="#ffffcc" valign="top"><b>Compile all the projects</b></td>
      <td>To compile everything, you need just to open each solution
that has been created in the previous step (they should be called <code>
makeallXXX.sln</code>) with Microsoft Visual Studio. Then, from Visual
Studio, you need to select the "<code>Build</code>" menu, then the "<code>Rebuild
Solution</code>" command.
      <p>The compilation should go smoothly, and you will end up having
all the binaries in the correct place. In compilation, please compile
sources first, then samples and tools.</p>
      </td>
    </tr>
    <tr>
      <td bgcolor="#ffffcc" valign="top"><b>Download a valid NetPDL
database</b></td>
      <td>You need to download a valid NetPDL database for everything
to be working. So, move into the bin folder and launch the <code>
downloadnetpdldb</code> executable (which has been compiled in the
previous step). It will connect to the Internet, download the most
updated NetPDL database, and save it in the current folder.
      <p>If this does not work (e.g., because you have limited Internet
connectivity), please open the web site <a href="http://www.nbee.org/">
http://www.nbee.org</a> and download the newest database manually.</p>
      </td>
    </tr>
    <tr>
      <td bgcolor="#ffffcc" valign="top"><b>Creating Docs and Source Pack</b></td>
      <td>At this point you may need to create the documentation and such. For
this, a set of UNIX script files are located in the root folder; please
refer to the information contained in these files for compiling the
documentation and creating the source pack.</td>
    </tr>
  </tbody>
</table>


<h2><a name="CompileUNIX"></a>Compiling NetBee on Unix-like systems</h2>

<h4>(Supported platforms: x86 Linux and Mac OS X, although we expect it
to work smoothly also on BSD)</h4>

<h3>Required tools</h3>

<table border="1" width="100%">

  <tbody>
    <tr>
      <th>Tool</th>
      <th>Description</th>
    </tr>
    <tr>
      <td bgcolor="#ffffcc"><b><a href="http://www.cmake.org/">Cmake</a></b></td>
      <td>The building process is managed through CMake. Therefore you
need this tool in order to create the project files. Please install
this package using the tools provided by your Unix distribution.<br>
      <strong>Note:</strong> version 2.6 is <strong>required</strong>.
You can check the version installed in your system by issuing the
command
      <pre># cmake --version</pre>
from your favourite shell. If your distribution does not provide the
correct version through the package manager, please download the
tarball from the <a href="http://www.cmake.org/">Cmake site</a> and
install it manually <br>
On Ubuntu Linux you can use <code>apt-get</code>:
      <pre># sudo apt-get install cmake</pre>
On Mac OS X you can get the Universal .dmg package from the <a href="http://www.cmake.org/">Cmake</a> site, or use the <a href="http://darwinports.com/">Darwin Ports</a> tool:<br>
      <pre># sudo port install cmake</pre>
      </td>
    </tr>
    <tr>
      <td bgcolor="#ffffcc"><b>GNU GCC</b></td>
      <td>The compiler, of course.<br>
      <strong>Note:</strong> the NetBee build system has been tested
with gcc version 4.1.2 (on Ubuntu Linux 7.04) and with gcc version
4.0.1 (on Intel Mac OS X 10.4 Tiger)</td>
    </tr>
    <tr>
      <td bgcolor="#ffffcc"><b>Libpcap</b></td>
      <td>The library used to capture
traffic from your network interfaces and to parse capture files. Although the binaries should be unstalled by default by the
operating system, the system headers may not.<br>
On Ubuntu Linux you can use <code>apt-get</code> to install the
appropriate package:
      <pre># sudo apt-get install libpcap</pre> (in case it has not been installed on your system)
      <pre># sudo apt-get install libpcap-dev</pre> (for the system headers)

On Mac OS X:<br>
      <pre># sudo port install libpcap</pre>

<strong>Please note that latest netbee revisions require libpcap
0.9.8 for correctly compiling, so make sure your system is up to date.
For instance, on Ubuntu 7.04 the libpcap0.8 package contains the
version 0.9.5 of the library, while on Ubuntu 7.10 you will find the
version 0.9.7 of libpcap.</strong>
      </td>
    </tr>
    <tr>
      <td bgcolor="#ffffcc"><b>Xerces-C version 2.8.0</b></td>
      <td>This library provides the access to all XML files for parsing.<br>
In order to get it, you can use the package manager available in your Unix distribution.<br>
On Ubuntu Linux you can use <code>apt-get</code>:
      <pre># sudo apt-get install libxerces28<br># sudo apt-get install libxerces28-dev</pre>
On Ubuntu Linux (version 9.04) you can use <code>apt-get</code>:
      <pre># sudo apt-get install libxerces-c28<br># sudo apt-get install libxerces-c2-dev</pre>
On Mac OS X you can use the <a href="http://darwinports.com/">Darwin
Ports</a> tool:<br>
      <pre># sudo port install xercesc</pre>
      </td>
    </tr>
    <tr>
      <td bgcolor="#ffffcc"><b>libpcre</b></td>
      <td>This library is required for the regular expression support.
Often it is already present on your systen; in case it is missing, you
can use the package manager available in your Unix distribution.<br>
On Ubuntu Linux:
      <pre># sudo apt-get install libpcre3<br># sudo apt-get install libpcre3-dev </pre>
      <p>On Mac OS X libpcre should be already installed, anyway you
can retrieve it through <a href="http://darwinports.com/">Darwin Ports</a>:
      </p>
      <pre># sudo port install pcre</pre>
    </tr>
    <tr>
      <td bgcolor="#ffffcc"><b>libsqlite3</b> (optional)</td>
      <td>This library is optional; it may be required if some compilation flags are 
	  turned on in order to dump some data on a SQLite3 database.
Often it is already present on your systen; in case it is missing, you
can use the package manager available in your Unix distribution.<br>
On Ubuntu Linux:
      <pre># sudo apt-get install libsqlite3<br># sudo apt-get install libsqlite3-dev </pre>
      <p>On Mac OS X you
can retrieve it through <a href="http://darwinports.com/">Darwin Ports</a>:
      </p>
      <pre># sudo port install sqlite3</pre>
    </tr>
    <tr>
      <td bgcolor="#ffffcc"><b>A recent version of <code>flex</code>
and <code>bison</code></b></td>
      <td>These tools are needed in order to build the parsers of the
several compilers included in the NetBee library. You should install
them using the package manager available in your Unix distribution<br>
On Ubuntu Linux you can use <code>apt-get</code>:
      <pre># sudo apt-get install flex</pre>
      <pre># sudo apt-get install bison</pre>
On Mac OS X you can use the <a href="http://darwinports.com/">Darwin
Ports</a> tool:<br>
      <pre># sudo port install flex</pre>
      <pre># sudo port install bison</pre>
      <strong>Note:</strong> the NetBee build system has been tested
with flex version 2.5, and bison version 2.3 on both Ubuntu Linux 7.04
and Intel Mac OS X 10.4 Tiger</td>
    </tr>
  </tbody>
</table>


<h3>Compiling NetBee</h3>

<p><font size="+1">1)</font> In order to compile the NetBee library and the tools you need first
to create the build system using cmake. So you need to open a shell,
move into the <code>src</code> subfolder of the <code>NetBee</code>
directory and issue the "<code>cmake .</code>" command: </p>

<pre># cd netbee/src<br># cmake .</pre>

Then you can build the NetBee library by issuing the <code>make</code>
command:
<pre># make</pre>

The build process should proceed smoothly, although some warnings may
be present (please don't care about them). At the end you should find a
set of libraries and of course the NetBee shared library in the <code>netbee/bin
folder</code>.

<p><font size="+1">2)</font> In order to compile the tools provided with NetBee you should follow
the same previous steps into the <code>netbee/tools</code> subfolder: </p>

<pre># cd netbee/tools<br># cmake .</pre>

Then you can build the tools by issuing the <code>make</code> command:
<pre># make</pre>

At the end you should find all the tools (e.g., <code>nbeedump</code>,
<code>nbextractor</code>, etc) in the <code>netbee/bin</code>
folder.

<p><font size="+1">3)</font> Then, you can compile all the samples using the same procedure.
You have to move into the <code>netbee/samples</code> subfolder: </p>

<pre># cd netbee/samples<br># cmake .</pre>

Then you can build the tools by issuing the <code>make</code> command:
<pre># make</pre>

At the end you should find all the samples in the <code>netbee/bin</code>
folder.

<p><font size="+1">4)</font> Finally, you will need to download a valid NetPDL database
for protocol definitions.

So, move into the <code>bin</code> folder and launch the <code>downloadnetpdldb</code> executable (which has been compiled in the previous step). It will connect to the Internet, download the most updated NetPDL database, and save it in the current folder.

If this does not work (e.g., because you have limited Internet connectivity), please connect to the <a href="http://www.nbee.org/">http://www.nbee.org</a> web site and download the newest database manually.</p>


<p><font size="+1">5)</font> In addition, you may need to create the documentation and such. For
this, a set of UNIX script files are located in the root folder; please
refer to the information contained in these files for compiling the
documentation and creating the source pack. </p>

<h2><a name="Troubles"></a>Possible problems</h2>

<h3>Cmake returns the "<i>LINK : fatal error LNK1104: cannot open file
'user32.lib'</i>"</h3>

<p>There is nothing we can do with this error. It is related to Cmake,
not to our environment. A suggestion can be found here:
<a href="http://people.mech.kuleuven.be/%7Etdelaet/bfl_doc/installation_guide/node15.html">http://people.mech.kuleuven.be/~tdelaet/bfl_doc/installation_guide/node15.html</a>.</p>

<p>However, what we have notices is that this error is more likely to
happen if you have Visual Studio C++, instead of Visual Studio .NET
2005. So, in case you do not have Visual .NET, please install that
compiler and see is now works.</p>

<h3>Cmake returns the "CMAKE_CXX_COMPILER-NOTFOUND error"</h3>

<p dir="ltr">This means that the user has not installed g++ or another
C++ compiler that cmake knows about. On an Ubuntu system, it is easy to
install gcc and not realize g++ did not come bundled with it.</p>

<h3>Some module fails to compile</h3>

<p> This can be due to the impossibility to generate the grammar files
with Flex/Bison. In this case please make sure that Flex and Bison are
properly installed (in Windows, they are part of the CygWin package)
and are in your path.</p>

<h3>In DEBUG mode, I get tons of strange messages on screen</h3>

<p> This is due to the <code>libpcre</code> module, which creates tons
of debug messages when compiled in DEBUG mode. This issue can be solved
by compiling this module in RELEASE mode.</p>

<h2><a name="NativeBackend"></a>Enabling Native Backends</h2>

<p>The NetVM can geneate native code for several platforms (Intel x86, 
Intel x64, Cavium Octeon, Xelerated X11). The former two are supported
through Just-In-Time techniques, while the latters are supported through
Ahead-Of-Time code generation (i.e., the output must be further processed
by the native compiler for that platform in order to get the actual code).</p>

<p>The first backend is the most widely tested, while the second is still
work in progress. The latters are really experimental.<br>
</p>

<p>When you want to deal with the generation of native code, you may have to
take into account the following steps:</p>

<ul>
  <li><b>Enable the compilation of the backend in the makefile</b>: by default, 
only the NetVM interpreter is turned on. You can select the additional native backends you want
by editing the <code>src/nbnetvm/CMakeLists.txt</code> file and turn the proper
option on.</li>
  <li><b>Disable the Execution Disable bit on your Intel plaform</b>: on latest
operating systems (e.g., Linux), the Execution Disable bit available on 
the newest Intel hardware is turned on by default. This prevents memory
pages that are marked as 'data' to be executed. However, this is what we
use to do in dynamic code gneration: we create dynamically the code 
in memory and then we execute it. The NetBee library on Linux has some additional code
that is able to avoid this problem, but in general other operating systems
(e.g. MacOS X) may not be able to execute the dynamically generated code.
In case you experiment a crash each time you try to execute native code 
(most tools and examples have the '<code>-jit</code>' switch, which turns the execution ot native code on),
please check this on your platform and try disabling the Execute Disable
bit in your operating system.</li>
</ul>


<h2><a name="PreparingRunTime"></a>Preparing the run-time environment (Windows)</h2>
<p>This step is required only if you compile the NetBee library on Windows since you 
have to add some libreries to the NetBee binaries; this step is not required on UNIX
since we suppose that those libraries are already present in your system.<p>
<p>Please note that headers files for those libraries are included in the NetBee
source folder, in the <code>'contrib'</code> folder.<p>
<p>In Windows, you have to add the following two libraries to the <code>bin</code> folder:</p>
 
<ul>
  <li><code>pcre</code>: library required to parse and execute regular expressions</li>
  <li><code>sqlite3</code>: library that is optionally required by some tools in order
  to dump data on a SQLite 3 database. This library is not required in a clean
  compilation of the NetBee, but it may be requires when some optional compilation
  flags are turned on.</li>
</ul>

<p>Binaries can be found in the proper folder under <code>'contrib'</code>; please 
copy the required binary files into the NetBee <code>'bin'</code> folder in order
to prepare the execution environment for NetBee.</p>


<h2><a name="DevPack"></a>Creating the Developer's Pack</h2>

<p> The NetBee library should not used directly to create other
programs. The expected behaviour is the following:</p>

<ul>
  <li>You compile the NetBee library form sources</li>
  <li>You create the NetBee Developer's Pack (nbDevPack) out of
compiled sources</li>
  <li>You use the nbDevPack to create your software based on NetBee</li>
</ul>

<p> This choice allows to create NetBee-based programs without the need
to distribute NetBee sources Therfore, the Developer's pack contains
all the libraries and header files required to create a program based
on NetBee. In order to create the NetBee Developer's pack, the NetBee
sources contain a set of UNIX shell files with the proper set of
commands in there. In case you have the NetBee sources and you want to
create the Developer's Pack, please launch the UNIX shell scripts (also
through a CygWin shell) and read the instructions contained in there.</p>

<p>Please be careful in creating the Developer's Pack out of the NetBee
sources if you want to use the NetBee library in third-party programs,
and compile your program against the developer's pack instead of
against NetBee sources directly. </p>

</body></html>
